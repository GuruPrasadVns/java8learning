public static String infixToPostfix(String exp){
    StringBuilder sb = new StringBuilder();
    Stack<Character> stack = new Stack<>();

    for(int i = 0; i < exp.length(); i++){
        char c = exp.charAt(i);

        if(Character.isLetterOrDigit(c)){
            sb.append(c);
        }
        else if(c == '('){
            stack.push(c);
        }
        else if(c == ')'){
            while(!stack.isEmpty() && stack.peek() != '('){
                sb.append(stack.pop());
            }
            if(stack.isEmpty())
                return "Invalid Expression";
            stack.pop();
        }
        else {
            while(precedance(stack.peek()) >= precedance(c)){
                sb.append(stack.pop());
            }
            stack.push(c);
        }
    }

    while(!stack.isEmpty()){
        sb.append(stack.pop());
    }
    return sb.toString();
}

private int precedance(char operator){
    switch(operator){
        case '^' : return 2;
        case '*' : return 1;
        case '/' : return 1;
        case '+' : return 0;
        case '-' : return 0;
    }
}