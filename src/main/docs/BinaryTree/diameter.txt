public static int diameter(Node root){
    if(root == null) return 0;

    int leftSubTreeHeight = height(root.left);
    int rightSubTreeHeight = height(root.right);

    int leftSubTreeDiameter = diameter(root.left);
    int rightSubTreeDiameter = diameter(root.right);


    return Math.max(leftSubTreeHeight + rightSubTreeHeight + 1 , Math.max(leftSubTreeDiameter, rightSubTreeDiameter));

}

1) root -> null ; diameter(root)
----------------------------------------
	diameter(null)
	----------------------------
		if(root == null)
			return 0;
			
2) root -> 1 : diameter(root)
---------------------------------------------
	diameter(Node(1))
	-----------------------------------------
		if(root == null) : false
		int leftSubtreeHeight = height(root.left) => height(null) => 0
		int rightSubtreeHeight = 0
		
		int leftSubtreeDiameter = diameter(null) => 0
		int rightSubtreeDiameter = 0
		
		return Math.max(leftSubtreeHeight + rightSubtreeHeight + 1, Math.max(leftSubtreeDiameter, rightSubtreeDiameter));
		=> return Math.max(0 + 0 + 1, Math.max(0 , 0));
		=> return Math.max(1, 0)
		=> return 1;


3) root ->
            1
       2           3

diameter(1)
-------------------------------------------------------
   if(root == null) : false
   int leftSubtreeHeight = height(root.left) => height(2) => 1
   int rightSubtreeHeight = height(root.left) => height(3) => 1

   int leftSubTreeDiameter = diameter(2) => 1
   int rightSubTreeDiameter = diameter(3) => 1

   return Math.max(1 + 1 + 1 , Math.max(1, 1))) => 3

