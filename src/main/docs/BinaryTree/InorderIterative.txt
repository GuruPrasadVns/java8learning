			1
		
		2		3
		
	4
	
	
Inorder : Left Root Right
------------------------------
4 2 1 3


Stack<Node> stack = new Stack();
stack -> null

Node current = root;

while(current != null || stack.size() > 0) => true
------------------------------------------------------
	while(current != null): true
	-------------------------------
		stack.push(current) => stack -> Node(1)
		current = current.left => current -> Node(2)
	
	while(current != null) : true
	--------------------------------------
		stack -> Node(1), Node(2)
		current -> Node(4)
		
	while(current != null) : true
	-----------------------------------------
		stack -> Node(1), Node(2), Node(4)
		current -> null
		
	current = stack.pop() => current -> Node(4); stack -> Node(1), Node(2)
	print(current.data+ " ") => output = 4 
	current = current.right; => current  = null
	
	
while(null != null || 2 > 0) : true
----------------------------------------------
	while(current != null) : false
	
	current = stack.pop() => current -> Node(2), stack -> Node(1)
	print(current.data + " ") => output = 4 2
	current = current.right => current = null
	
	
while(null != null || 1 > 0) : true
--------------------------------------------------
	while(null != null):false
	
	current = stack.pop() => current -> Node(1), stack -> empty
	
	print(current.data) => output = 4 2 1
	
	current = current.right => current = Node(3)
	

while(Node(3) != null || 0 > 0) : true
----------------------------------------------------------
	while(Node(3) != null)
	---------------------------------
		stack -> Node(3)
		current -> null
		
	current = stack.pop() => current = Node(3), stack -> empty
	output = 4 2 1 3
	current = null
	

while loop terminates
	